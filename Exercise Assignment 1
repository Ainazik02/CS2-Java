Name:Ainazik
Surname:Kamaldinova


EX 2.3.  What is wrong with the following program statement? How can it be fixed? System.out.println(“To be or not to be, that 
Is the question.”);

Solution 2.3)
The argument that is passed to System.out.println() should be in one line, otherwise it will execute a system error(I tried myself). No worries  if it is written half in one line, half of the string in another line , we can solve this problem by adding plus sign(+) with a different quotation mark. The reason why is because double quote can exist in one single line, unlike other programming languages and my surprise.

Specifically, 

System.out.println(“To be or not to be, that”+
“Is the question.”);



EX 2.4.  What output is produced by the following statement? Explain.
System.out.println ("50 plus 25 is " + 150 + 125);
 
Solution 2.4)
It will execute as 50 plus 25 is 150125. According to the rule the plus(+) operator concatenates two strings and also string with number, if they are not in one parentheses and numbers are not separated with different parentheses. In order to solve as math do, we should write the following code:
System.out.println ("50 plus 25 is " + (150 + 125));






EX 2.5. What is the output produced by the following statement? Explain.
System.out.println ("He thrusts his fists\n\n\t against" +
" the post\n and still insists\n\t \”he\” sees the \"ghost\"");

Solution 2.5)
In JAVA as in Python, we have escape sequences that represent special series of characters. So \n means new line, \t means tab and last in this example \”string”\ means executing string with the quotation mark. The output will be:

He thrusts his fists  //after we have two new lines, represented as \n\n

	 against the post  //in this line we have a tab \t, and the words against with the post are concatenated, because it has a plus sign and  they don’t have anything to interrupt btw them
 and still insists  // again new line after it 
	 "he" sees the "ghost” //as I mentioned above we have tab and executed string with quotation mark in this line





EX 2.6. What value is contained in the integer variable size after the following statements are executed?

size = 20;
size = size + 12;
size = size * 2;
size = size / 8;

Solution 2.6) 
size = 20; //initial value is given to a variable (int size=20)
size = size + 12;  //we are adding 12 to our variable this is equal to 20
size = size * 2; //now size is 32 and we multiply it by 2 which is 64
size = size / 8;  //64 is divided by 8 is 8

So number 8 will be executed 


EX 2.7. What value is contained in the floating-point variable depth after the following statements are executed?
depth = 2.4;
depth = 40 – depth * 4;
depth = depth / 6;

Solution 2.7)
depth = 2.4;  //initial value is given to a variable (double depth=2.4)
depth = 40 – depth * 4;  //Math operation with variable 2.4
depth = depth / 6;  //Math operation with variable depth=30.4

So floating number depth =5.066666666666666 will be executed 



EX 2.8. What value is contained in the integer variable length after the following statements are executed?
length = 20;
length *= 2;
length *= length;
length /= 200;

Solution 2.8)
length = 20;
length *= 2;
length *= length;
length /= 200;

It will execute 8 as a result with the same math operators. However, what is different is that we have assignment operators, which perform the operation first and then store the result back to the variable. It is all to simplify the coding and means x=x*y, which is given as x*=y in the example 


EX 2.11. For each of the following expressions, indicate the order in which the operators will be evaluated by writing a number beneath each operator.

Example:  a – b * c – d
           2   1    3

a. a – b – c – d
     1   2   3
b. a – b + c – d
     2   1     3
c. a + b / c / d
    3    1    2
d. a + b / c * d
    3    1   2
e. a / b * c * d
   1     2    3
f. a % b / c * d
     1   2   3
g. a % b % c % d
    1    2   3
h. a – (b – c) – d
    2     1    3
i. (a – (b – c)) – d
      2    1     3
j. a – ((b – c) – d)
      3       1     2
k. a % (b % c) * d * e
    2    1    3    4
l. a + (b – c) * d – e
     3     1     2     4
m. (a + b) * c + d * e
      1      2    4   3
n. (a + b) * (c / d) % e
      1    3    2    4

